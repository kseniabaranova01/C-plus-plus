#include <iostream> // Подключение библиотеки ввода/вывода.
#include <string> // Подключение библиотеки строк.
#include <algorithm> // Подключение библиотеки алгоритмов.
#include <cmath> // Подключение библиотеки математических функций.
using namespace std; // Использование пространства имен std.
const double pi = 3.14; // Определение константы pi.

// Определение функций для математических операций.

int add(int a, int b) // Функция сложения двух целых чисел.
{
    return a + b;
}

int multiply(int a, int b) // Функция умножения двух целых чисел.
{
    return a * b;
}

double multiply1(double a, double b) // Функция умножения двух вещественных чисел.
{
    return a * b;
}

double divide(double a, double b) // Функция деления двух вещественных чисел.
{
    return  a / b;
}

double average(int a, int b) // Функция вычисления среднего арифметического двух целых чисел.
{
    return (a + b) / 2;
}

double circlelongevity(int a) // Функция вычисления длины окружности по радиусу.
{
    return 2 * a * pi;
}

double circleploshad(int a) // Функция вычисления площади круга по радиусу.
{
    return a * a * pi;
}



// Определили две структуры данных: CartesianCoordinates для хранения декартовых координат (x, y) и PolarCoordinates для хранения полярных координат (r, theta).

struct CartesianCoordinates {
    double x;
    double y;
};

struct PolarCoordinates {
    double r;
    double theta;
};



// Определение нескольких функций для выполнения различных задач.

void first()
{
    std::cout << "Enter the first foundation "; // Выводится запрос на ввод значения первого основания.
    int a = 0; // Инициализация переменной a.
    std::cin >> a; // Пользователь вводит значение a.

    std::cout << "Enter the second foundation, which is less than the first one "; // Запрос на ввод значения второго основания, которое должно быть меньше первого.
    int b = 0; // Инициализация переменной b.
    std::cin >> b; // Пользователь вводит значение b.

    std::cout << "Enter the height "; // Запрос на ввод значения высоты.
    int h = 0; // Инициализация переменной h.
    std::cin >> h; // Пользователь вводит значение h.

    std::cout << "Ploshad " << multiply((divide(add(a, b), 2)), h); // Вычисление и вывод площади прямоугольника по формуле (a + b) / 2 * h.
}

void second()
{
    std::cout << "Enter the radius "; // Выводится запрос на ввод значения радиуса.
    int a = 0; // Инициализация переменной a.
    std::cin >> a; // Пользователь вводит значение радиуса.

    std::cout << "Dlina = " << circlelongevity(a) << std::endl; // Выводится длина окружности для введенного радиуса.
    std::cout << "Ploshad = " << circleploshad(a); // Выводится площадь круга для введенного радиуса.
}

void third()
{
    std::cout << "Enter the first catet: "; // Выводится запрос на ввод значения первого катета.
    int a = 0; // Инициализация переменной a.
    std::cin >> a; // Пользователь вводит значение первого катета.

    std::cout << "Enter the second catet: "; // Выводится запрос на ввод значения второго катета.
    int b = 0; // Инициализация переменной b.
    std::cin >> b; // Пользователь вводит значение второго катета.

    std::cout << "Enter the height: "; // Выводится запрос на ввод значения высоты.
    int h = 0; // Инициализация переменной h.
    std::cin >> h; // Пользователь вводит значение высоты.

    double c = divide(multiply(a, b), 2); // Вычисление площади треугольника по формуле (a * b) / 2.
    std::cout << "Ploshad treygolnika: " << c << std::endl; // Выводится площадь треугольника.

    double hypotenuse_length = divide(multiply(c, 2), h); // Вычисление длины гипотенузы по формуле (2 * c) / h.
    std::cout << "Dlina gipotenuzy: " << hypotenuse_length; // Выводится длина гипотенузы.
}

void forth()
{
    std::cout << "Enter the 4 symbol number: "; // Выводится запрос на ввод 4-х значного числа.
    int a = 0; // Инициализация переменной a.
    std::cin >> a; // Пользователь вводит 4-х значное число.

    int m = a % 10; // Получение последней цифры числа.
    int n = (a / 10) % 10; // Получение предпоследней цифры числа.
    int k = (a / 100) % 10; // Получение третьей цифры числа.
    int z = (a / 1000) % 10; // Получение первой цифры числа.

    int sum = m + n + k + z; // Вычисление суммы цифр числа.
    std::cout << sum; // Выводится сумма цифр на экран.
}

void five() {
    PolarCoordinates polar; // Создание объекта для хранения полярных координат.

    // Ввод полярных координат
    std::cout << "Enter the r: ";
    std::cin >> polar.r; // Ввод радиуса r.

    std::cout << "Enter the theta: ";
    std::cin >> polar.theta; // Ввод угла theta.

    // Переход к декартовым координатам
    CartesianCoordinates cartesian; // Создание объекта для хранения декартовых координат.
    cartesian.x = polar.r * std::cos(polar.theta); // Вычисление координаты x по радиусу и углу.
    cartesian.y = polar.r * std::sin(polar.theta); // Вычисление координаты y по радиусу и углу.

    // Вывод декартовых координат
    std::cout << "Decart:\n";
    std::cout << "x = " << cartesian.x << "\n"; // Вывод координаты x.
    std::cout << "y = " << cartesian.y << "\n"; // Вывод координаты y.
}


void six() {
    CartesianCoordinates cartesian; // Создание объекта для хранения декартовых координат.

    // Ввод декартовых координат
    std::cout << "Enter the x: ";
    std::cin >> cartesian.x; // Ввод координаты x.

    std::cout << "Enter the y: ";
    std::cin >> cartesian.y; // Ввод координаты y.

    // Переход к полярным координатам
    PolarCoordinates polar; // Создание объекта для хранения полярных координат.
    polar.r = std::sqrt(cartesian.x * cartesian.x + cartesian.y * cartesian.y); // Вычисление радиуса r по координатам x и y.
    polar.theta = std::atan2(cartesian.y, cartesian.x); // Вычисление угла theta с использованием арктангенса.

    // Вывод полярных координат
    std::cout << "Polar:\n";
    std::cout << "r = " << polar.r << "\n"; // Вывод радиуса r.
    std::cout << "0 = " << polar.theta << "\n"; // Вывод угла theta.
}

void seventh()
{
    double a = 0; // Инициализация коэффициента a.
    double b = 0; // Инициализация коэффициента b.
    double c = 0; // Инициализация коэффициента c.
    double x1 = 0; // Инициализация первого корня уравнения.
    double x2 = 0; // Инициализация второго корня уравнения.

    std::cout << "Enter the a,b,c for ax^2+bx+c: "; // Запрос на ввод коэффициентов уравнения.
    std::cin >> a; // Пользователь вводит коэффициент a.
    std::cin >> b; // Пользователь вводит коэффициент b.
    std::cin >> c; // Пользователь вводит коэффициент c.

    double disk = b * b - 4 * a * c; // Вычисление дискриминанта.

    if (disk > 0) // Если дискриминант больше 0, у уравнения два корня.
    {
        x1 = (-b + sqrt(disk)) / (2 * a); // Вычисление первого корня.
        x2 = (-b - sqrt(disk)) / (2 * a); // Вычисление второго корня.
        std::cout << "the x1 =" << x1 << " the x2 =" << x2; // Вывод корней уравнения.
    }
    else if (disk == 0) // Если дискриминант равен 0, у уравнения один корень.
    {
        x1 = -b / (2 * a); // Вычисление корня.
        x2 = x1; // x2 присваивается значение x1.
        std::cout << "the x = " << x1; // Вывод корня уравнения.
    }
    else if (disk < 0) // Если дискриминант меньше 0, у уравнения нет корней.
    {
        std::cout << "No roots!"; // Вывод сообщения о отсутствии корней.
    }
}

void eight()
{
    std::cout << "Enter the sides a,b,c "; // Выводится запрос на ввод длин сторон треугольника.
    double a = 0; // Инициализация переменной a.
    double b = 0; // Инициализация переменной b.
    double c = 0; // Инициализация переменной c.
    std::cin >> a >> b >> c; // Пользователь вводит длины сторон треугольника.

    double ma = 0.5 * (sqrt(2 * b * b + 2 * c * c - a * a)); // Вычисление медианы относительно стороны a.
    std::cout << "mediana a= " << ma; // Вывод медианы a.

    double mb = 0.5 * (sqrt(2 * a * a + 2 * c * c - b * b)); // Вычисление медианы относительно стороны b.
    std::cout << " mediana b= " << mb; // Вывод медианы b.

    double mc = 0.5 * (sqrt(2 * b * b + 2 * a * a - c * c)); // Вычисление медианы относительно стороны c.
    std::cout << " mediana c= " << mc; // Вывод медианы c.
}

void nine()
{
    std::cout << "Enter the second of the day "; // Выводится запрос на ввод количества секунд.
    int a = 0; // Инициализация переменной a.
    std::cin >> a; // Пользователь вводит количество секунд.

    int hour = a / 3600; // Вычисление количества часов.
    int min = (a % 3600) / 60; // Вычисление количества минут (остаток от деления на 3600 секунд, затем результат делится на 60).

    std::cout << "Lasted " << hour << " hours " << min << " minutes"; // Выводится результат в формате "Прошло часов минут".
}

void ten() {
    std::cout << "Enter the a,b,c sides "; // Выводится запрос на ввод длин сторон треугольника.
    int a, b, c; // Инициализация переменных a, b, c.
    std::cin >> a >> b >> c; // Пользователь вводит длины сторон треугольника.

    if (a == b || b == c || a == c) // Проверка условия равенства хотя бы двух сторон треугольника.
    {
        std::cout << "The treugol is ravnobed"; // Вывод сообщения о том, что треугольник равнобедренный.
    }
    else {
        std::cout << "Bad news"; // Вывод сообщения о том, что треугольник не равнобедренный.
    }
}

void eleven()
{
    std::cout << "Enter the cost "; // Выводится запрос на ввод стоимости товара.
    double a; // Инициализация переменной a для хранения стоимости товара.
    std::cin >> a; // Пользователь вводит стоимость товара.

    if (a > 1000) // Проверка условия: если стоимость товара больше 1000.
    {
        double k = a * 0.1; // Вычисление скидки (10% от стоимости).
        double tot = a - k; // Вычисление общей стоимости с учетом скидки.
        std::cout << "Total cost is " << tot; // Вывод общей стоимости с учетом скидки.
    }
    else {
        std::cout << "Total cost is " << a; // Вывод общей стоимости без скидки.
    }
}

void twelve()
{
    std::cout << "Enter the height "; // Выводится запрос на ввод роста.
    double a; // Инициализация переменной a для хранения роста.
    std::cin >> a; // Пользователь вводит рост.

    std::cout << "Enter the weight "; // Выводится запрос на ввод веса.
    double b; // Инициализация переменной b для хранения веса.
    std::cin >> b; // Пользователь вводит вес.

    double c = a - 100; // Вычисление "нормального" веса по формуле (рост - 100).

    if (b > c) // Проверка условия: если вес больше "нормального" веса.
    {
        std::cout << "Hydeem"; // Вывод сообщения (худеем).
    }
    else if (b < c) // Проверка условия: если вес меньше "нормального" веса.
    {
        std::cout << "Tolsteem"; // Вывод сообщения  (толстеем).
    }
    else // В противном случае (если вес равен "нормальному" весу).
    {
        std::cout << "Cool"; // Вывод сообщения (вес в норме).
    }
}

void thirteen()
{
    int num1 = (rand() % 9) + 1; // Генерация случайного числа num1 от 1 до 9.
    int num2 = (rand() % 9) + 1; // Генерация случайного числа num2 от 1 до 9.

    std::cout << "Enter the answer for the task " << num1 << "*" << num2; // Выводится задание на умножение.

    int ans = 0; // Инициализация переменной ans для хранения ответа пользователя.
    std::cin >> ans; // Пользователь вводит ответ.

    if (ans == (num1 * num2)) // Проверка условия: если ответ пользователя равен произведению num1 и num2.
    {
        std::cout << "Excellent "; // Выводится сообщение "Excellent".
    }
    else {
        std::cout << "Not excellent, the correct is " << num1 * num2; // Выводится сообщение о неверном ответе и показывается правильный ответ.
    }
}

void fourteen()
{
    std::cout << "Enter the minutes, the price of 1 minute costs 3 rub "; // Выводится запрос на ввод количества минут и стоимости 1 минуты.
    double a; // Инициализация переменной a для хранения количества минут.
    std::cin >> a; // Пользователь вводит количество минут.

    std::cout << "Enter the weekday if 1-Monday, 2-Tuesday,..., 7-Sunday "; // Выводится запрос на ввод номера дня недели.
    double b; // Инициализация переменной b для хранения номера дня недели.
    std::cin >> b; // Пользователь вводит номер дня недели.

    double cost = a * 3; // Вычисление общей стоимости звонков.

    std::cout << "Your check is " << cost << "!  Let's check the sale " << std::endl; // Выводится общая стоимость и предложение проверить наличие скидки.

    if (b == 7 || b == 6) // Проверка условия: если день недели - суббота или воскресенье.
    {
        double total = cost - (cost * 0.2); // Вычисление стоимости со скидкой (20% от общей стоимости).
        std::cout << "Total cost is " << total; // Выводится общая стоимость со скидкой.
    }
    else {
        std::cout << "No sales"; // Выводится сообщение, что скидок нет.
    }
}

void fifteen()
{
    std::cout << "Enter the index of month if 1 is January,.., 12 is December "; // Выводится запрос на ввод номера месяца.
    int a; // Инициализация переменной a для хранения номера месяца.
    std::cin >> a; // Пользователь вводит номер месяца.

    if (a == 1 || a == 2 || a == 12) // Проверка условия: если номер месяца является зимним месяцем (1, 2 или 12).
    {
        std::cout << "Winter baby "; // Выводится сообщение о том, что идет зима.
    }
    else if (a == 3 || a == 4 || a == 5) // Проверка условия: если номер месяца является весенним месяцем (3, 4 или 5).
    {
        std::cout << "Spring baby " << std::endl; // Выводится сообщение о том, что идет весна.
    }
    else if (a == 6 || a == 7 || a == 8) // Проверка условия: если номер месяца является летним месяцем (6, 7 или 8).
    {
        std::cout << "Summer baby " << std::endl; // Выводится сообщение о том, что идет лето.
    }
    else if (a == 9 || a == 10 || a == 11) // Проверка условия: если номер месяца является осенним месяцем (9, 10 или 11).
    {
        std::cout << "Autumn baby " << std::endl; // Выводится сообщение о том, что идет осень.
    }

    // Дополнительные условия для вывода названия месяца.
    if (a == 1)
        std::cout << "January" << std::endl;
    else if (a == 2)
        std::cout << "February" << std::endl;
    else if (a == 3)
        std::cout << "March" << std::endl;
    else if (a == 4)
        std::cout << "April" << std::endl;
    else if (a == 5)
        std::cout << "May" << std::endl;
    else if (a == 6)
        std::cout << "June" << std::endl;
    else if (a == 7)
        std::cout << "July" << std::endl;
    else if (a == 8)
        std::cout << "August" << std::endl;
    else if (a == 9)
        std::cout << "September" << std::endl;
    else if (a == 10)
        std::cout << "October" << std::endl;
    else if (a == 11)
        std::cout << "November" << std::endl;
    else if (a == 12)
        std::cout << "December" << std::endl;
}

void sixteen()
{
    std::cout << "Enter the 6 symbol number "; // Выводится запрос на ввод шестизначного числа.
    int num;
    std::cin >> num; // Пользователь вводит шестизначное число.

    int a = num % 1000; // Получение последних трех цифр числа.
    int b = num / 1000; // Получение первых трех цифр числа.

    int sum = 0; // Инициализация переменной sum для суммирования цифр последних трех цифр числа.
    int sum2 = 0; // Инициализация переменной sum2 для суммирования цифр первых трех цифр числа.

    while (a > 0)
    {
        sum += a % 10; // Суммирование цифр последних трех цифр числа.
        a /= 10; // Удаление последней цифры числа.
    }

    while (b > 0)
    {
        sum2 += b % 10; // Суммирование цифр первых трех цифр числа.
        b /= 10; // Удаление последней цифры числа.
    }

    if (sum == sum2)
    {
        std::cout << "The number is happy"; // Вывод сообщения о том, что число является "счастливым".
    }
    else
    {
        std::cout << "The number is not happy"; // Вывод сообщения о том, что число не является "счастливым".
    }
}

void seventeen()
{
    std::cout << "Enter the number from 1 to 99 "; // Выводится запрос на ввод числа от 1 до 99.
    int num;
    std::cin >> num; // Пользователь вводит число.

    if (num > 20) // Проверка, если число больше 20.
    {
        int last = num % 10; // Получение последней цифры числа.

        if (last == 1)
            std::cout << num << " kopeika"; // Вывод сообщения о копейке, если последняя цифра равна 1.
        else if (last > 1 && last < 5)
            std::cout << num << " kopeiki"; // Вывод сообщения о копейках, если последняя цифра от 2 до 4.
        else if (last > 4 || last == 0)
            std::cout << num << " kopeek"; // Вывод сообщения о копейках, если последняя цифра больше 4 или равна 0.
    }
    else if (num >= 1 && num <= 20) // Проверка, если число от 1 до 20.
    {
        if (num == 1)
            std::cout << num << " kopeika"; // Вывод сообщения о копейке, если число равно 1.
        else if (num > 1 && num < 5)
            std::cout << num << " kopeiki"; // Вывод сообщения о копейках, если число от 2 до 4.
        else if (num > 4 || num == 0)
            std::cout << num << " kopeek"; // Вывод сообщения о копейках, если число больше 4 или равно 0.
    }
    else
    {
        std::cout << "Number is not from 1 to 99"; // Вывод сообщения о том, что число вне диапазона от 1 до 99.
    }
}

void eighteen()
{
    std::cout << "Enter the 4 symbol number "; // Выводится запрос на ввод четырехзначного числа.
    int num;
    std::cin >> num; // Пользователь вводит четырехзначное число.

    int a = num % 10; // Получение последней цифры числа.
    int b = (num / 10) % 10; // Получение предпоследней цифры числа.
    int c = (num / 100) % 10; // Получение второй цифры числа.
    int d = (num / 1000) % 10; // Получение первой цифры числа.

    if (a == d && b == c)
    {
        std::cout << "Palindrom "; // Вывод сообщения о том, что число является палиндромом.
    }
    else
    {
        std::cout << "Ne Palindrom "; // Вывод сообщения о том, что число не является палиндромом.
    }
}

void nineteen()
{
    std::cout << "Enter the 3 symbol number "; // Выводится запрос на ввод трехзначного числа.
    int num;
    std::cin >> num; // Пользователь вводит трехзначное число.

    std::cout << "Enter the number b "; // Выводится запрос на ввод числа b.
    int b;
    std::cin >> b; // Пользователь вводит число b.

    int pro = 1; // Инициализация переменной pro для произведения цифр числа.
    int sum = 0; // Инициализация переменной sum для суммирования цифр числа.

    while (num > 0)
    {
        sum += num % 10; // Суммирование цифр числа.
        pro *= num % 10; // Умножение цифр числа.
        num /= 10; // Удаление последней цифры числа.
    }

    if (sum % 7 == 0)
    {
        std::cout << sum << " kratno 7"; // Вывод сообщения о том, что сумма цифр кратна 7.
    }
    else
    {
        std::cout << sum << " ne kratno 7" << std::endl; // Вывод сообщения о том, что сумма цифр не кратна 7.
    }

    if (pro > b)
    {
        std::cout << pro << ">" << b; // Вывод сообщения о том, что произведение цифр больше числа b.
    }
    else if (pro < b)
    {
        std::cout << pro << "<" << b; // Вывод сообщения о том, что произведение цифр меньше числа b.
    }
    else if (pro == b)
    {
        std::cout << pro << "=" << b; // Вывод сообщения о том, что произведение цифр равно числу b.
    }
}

void twenty()
{
    std::cout << "Enter the a side "; // Выводится запрос на ввод стороны a.
    int a;
    std::cin >> a; // Пользователь вводит значение стороны a.

    std::cout << "Enter the b side "; // Выводится запрос на ввод стороны b.
    int b;
    std::cin >> b; // Пользователь вводит значение стороны b.

    std::cout << "Enter the c side "; // Выводится запрос на ввод стороны c.
    int c;
    std::cin >> c; // Пользователь вводит значение стороны c.

    std::cout << "Enter the d side "; // Выводится запрос на ввод стороны d.
    int d;
    std::cin >> d; // Пользователь вводит значение стороны d.

    if (a <= c && b <= d || a <= d && b <= c)
    {
        std::cout << "Moshno vpisat "; // Вывод сообщения о том, что можно вписать.
    }
    else {
        std::cout << "Nelzya "; // Вывод сообщения о том, что нельзя вписать.
    }
}

void twentyone()
{
    std::cout << "Sizes in bytes\n"; // Вывод заголовка.

    std::cout << "char: " << sizeof(char) << " byte\n"; // Вывод размера типа данных char в байтах (использую другой метод переноса строки :)).
    std::cout << "int: " << sizeof(int) << " byte\n"; // Вывод размера типа данных int в байтах.
    std::cout << "float: " << sizeof(float) << " byte\n"; // Вывод размера типа данных float в байтах.
    std::cout << "double: " << sizeof(double) << " byte\n"; // Вывод размера типа данных double в байтах.
    std::cout << "long long: " << sizeof(long long) << " byte\n"; // Вывод размера типа данных long long в байтах.
}






int main() {

    //first();
    //second();
    //third();
    //forth();
    //five();
    //six();
    //seventh();
    //eight();
    //nine();
    //ten();
    //eleven();
    //twelve();
    //thirteen();
    //fourteen();
    //fifteen();
    //sixteen();
    //seventeen();
    //eighteen();
    //nineteen();
    //twenty();
    //twentyone();
    return 0;
}
